import React, { useState, useEffect } from 'react';
import { FaSearch, FaCheck, FaFlask, FaClipboardCheck, FaFileAlt, FaTimesCircle, FaPlus, FaDownload, FaEye, FaUserPlus } from 'react-icons/fa';
import { MdOutlineDone } from 'react-icons/md';
import Layout from '../../components/Layout';
import { 
  getTestBookings, 
  markSampleCollected, 
  markProcessing, 
  markReviewed, 
  markCompleted, 
  cancelTestBooking,
  getAllTests,
  getAllPatients,
  getAllDoctors,
  bookTest,
  getTestWithParameters,
  downloadTestReport,
  getTestReports,
  createPatient
} from '../../services/api';
import GenerateReportModal from '../../components/reports/GenerateReportModal';
import PatientForm from '../../components/patients/PatientForm';
import { FormField, Alert } from '../../components/common';

const SampleManagement = () => {
  // State for samples in different statuses
  const [samples, setSamples] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('booked');
  const [searchQuery, setSearchQuery] = useState('');
  const [showCancelModal, setShowCancelModal] = useState(false);
  const [selectedBooking, setSelectedBooking] = useState(null);
  const [cancelNotes, setCancelNotes] = useState('');
  
  // State for booking modal
  const [showBookingModal, setShowBookingModal] = useState(false);
  const [patients, setPatients] = useState([]);
  const [doctors, setDoctors] = useState([]);
  const [tests, setTests] = useState([]);
  const [bookingFormData, setBookingFormData] = useState({
    patient_id: '',
    doctor_id: '',
    test_id: '',
    notes: ''
  });
  const [bookingErrors, setBookingErrors] = useState({});

  // New state for patient creation
  const [isCreatingNewPatient, setIsCreatingNewPatient] = useState(false);
  const [newPatientData, setNewPatientData] = useState({
    name: '',
    email: '',
    phone: '',
    date_of_birth: '',
    gender: '',
    address: '',
    medical_history: ''
  });
  const [newPatientErrors, setNewPatientErrors] = useState({});
  const [patientCreationSuccess, setPatientCreationSuccess] = useState(false);

  // Fix: Remove redundant state and keep only one set of report modal state
  const [showGenerateReportModal, setShowGenerateReportModal] = useState(false);
  const [selectedSampleForReport, setSelectedSampleForReport] = useState(null);
  const [reportModalLoading, setReportModalLoading] = useState(false);
  const [isEditingReport, setIsEditingReport] = useState(false); // New state to track if editing existing report
  const [viewOnly, setViewOnly] = useState(false); // Add viewOnly state

  // Tabs for the different statuses
  const tabs = [
    { id: 'booked', label: 'Booked', color: 'yellow' },
    { id: 'sample_collected', label: 'Collected', color: 'green' },
    { id: 'processing', label: 'Processing', color: 'blue' },
    { id: 'reviewed', label: 'Reviewed', color: 'purple' },
    { id: 'completed', label: 'Completed', color: 'gray' }
  ];

  useEffect(() => {
    fetchSamples(activeTab);
  }, [activeTab]);

  // Fetch samples with their reports
  const fetchSamples = async (status) => {
    try {
      setLoading(true);
      // Use the status directly as the parameter name
      const response = await getTestBookings({ status: status });
      
      // If in processing tab, fetch reports for each sample
      if (status === 'processing') {
        // Add a delay to ensure reports are fetched
        const samplesWithReports = await Promise.all(response.map(async (sample) => {
          try {
            const reports = await getTestReports({ test_booking_id: sample.id });
            return {
              ...sample,
              hasReport: reports && reports.length > 0,
              report: reports && reports.length > 0 ? reports[0] : null
            };
          } catch (err) {
            console.error(`Error fetching reports for sample ${sample.id}:`, err);
            return { ...sample, hasReport: false };
          }
        }));
        
        setSamples(samplesWithReports);
      } else {
        setSamples(response);
      }
      
      setError(null);
    } catch (err) {
      setError(`Failed to fetch samples in ${status} status`);
    } finally {
      setLoading(false);
    }
  };

  const handleMarkSampleCollected = async (sampleId) => {
    try {
      setLoading(true);
      await markSampleCollected(sampleId);
      fetchSamples(activeTab);
      setError(null);
    } catch (err) {
      setError('Failed to mark sample as collected: ' + (err.response?.data?.message || err.message));
    } finally {
      setLoading(false);
    }
  };

  // Handler for patient form input changes
  const handleNewPatientInputChange = (e) => {
    const { name, value } = e.target;
    setNewPatientData({
      ...newPatientData,
      [name]: value
    });
  };

  // Toggle between creating a new patient and selecting an existing one
  const togglePatientCreation = () => {
    setIsCreatingNewPatient(!isCreatingNewPatient);
    setNewPatientErrors({});
    setPatientCreationSuccess(false);
    
    // Reset patient_id when switching to create new patient
    if (!isCreatingNewPatient) {
      setBookingFormData({
        ...bookingFormData,
        patient_id: ''
      });
    }
  };

  // Create a new patient
  const handleCreatePatient = async () => {
    try {
      setLoading(true);
      setNewPatientErrors({});
      
      // Validate form
      const errors = {};
      if (!newPatientData.name) errors.name = 'Name is required';
      if (!newPatientData.email) errors.email = 'Email is required';
      if (!newPatientData.phone) errors.phone = 'Phone number is required';
      
      if (Object.keys(errors).length > 0) {
        setNewPatientErrors(errors);
        setLoading(false);
        return;
      }
      
      // Create patient
      const response = await createPatient(newPatientData);
      
      // Update patients list and select the new patient
      setPatients([...patients, response]);
      setBookingFormData({
        ...bookingFormData,
        patient_id: response.id.toString()
      });
      
      // Show success message
      setPatientCreationSuccess(true);
      
      // Reset creation form and switch back to selection
      setTimeout(() => {
        setPatientCreationSuccess(false);
        setIsCreatingNewPatient(false);
      }, 2000);
      
      setError(null);
    } catch (err) {
      setError('Failed to create patient: ' + (err.response?.data?.message || err.message));
      if (err.response?.data?.errors) {
        setNewPatientErrors(err.response.data.errors);
      }
    } finally {
      setLoading(false);
    }
  };

  const handleOpenBookingModal = async () => {
    try {
      setLoading(true);
      setError(null);
      setIsCreatingNewPatient(false);
      setNewPatientData({
        name: '',
        email: '',
        phone: '',
        date_of_birth: '',
        gender: '',
        address: '',
        medical_history: ''
      });

      // Fetch data needed for booking form
      const [patientsResponse, doctorsResponse, testsResponse] = await Promise.all([
        getAllPatients(),
        getAllDoctors(),
        getAllTests()
      ]);

      setPatients(patientsResponse);
      setDoctors(doctorsResponse);
      setTests(testsResponse);
      setShowBookingModal(true);
    } catch (err) {
      setError('Failed to load booking form data: ' + (err.response?.data?.message || err.message));
    } finally {
      setLoading(false);
    }
  };

  const handleBookingInputChange = (e) => {
    const { name, value } = e.target;
    setBookingFormData({
      ...bookingFormData,
      [name]: value
    });
  };

  const handleBookTest = async (e) => {
    e.preventDefault();
    try {
      setLoading(true);
      setBookingErrors({});
      
      // Validate form
      const errors = {};
      if (!isCreatingNewPatient && !bookingFormData.patient_id) {
        errors.patient_id = 'Patient is required';
      }
      if (!bookingFormData.doctor_id) errors.doctor_id = 'Doctor is required';
      if (!bookingFormData.test_id) errors.test_id = 'Test is required';
      
      if (Object.keys(errors).length > 0) {
        setBookingErrors(errors);
        setLoading(false);
        return;
      }
      
      // Submit booking
      await bookTest(bookingFormData);
      
      // Reset form and close modal
      setBookingFormData({
        patient_id: '',
        doctor_id: '',
        test_id: '',
        notes: ''
      });
      setShowBookingModal(false);
      setIsCreatingNewPatient(false);
      
      // Refresh the samples list
      fetchSamples('booked');
      
      setError(null);
    } catch (err) {
      setError('Failed to book test: ' + (err.response?.data?.message || err.message));
    } finally {
      setLoading(false);
    }
  };

  // Keep all existing methods and UI elements...

  // Render the book sample modal with the new patient creation option
  const renderBookSampleModal = () => (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        <h3 className="text-lg font-medium mb-4">Book New Test Sample</h3>
        <div className="mb-4">
          <div className="flex items-center justify-between">
            <h4 className="text-base font-medium">Patient Information</h4>
            <button
              type="button"
              onClick={togglePatientCreation}
              className="text-sm flex items-center text-indigo-600 hover:text-indigo-800"
            >
              {isCreatingNewPatient ? (
                <>Select Existing Patient</>
              ) : (
                <>
                  <FaUserPlus className="mr-1" /> Add New Patient
                </>
              )}
            </button>
          </div>
          
          {/* Show success alert when patient is created */}
          {patientCreationSuccess && (
            <Alert 
              type="success" 
              title="Patient created successfully"
              message="The new patient has been added and selected for this test booking."
              onDismiss={() => setPatientCreationSuccess(false)}
            />
          )}
          
          {isCreatingNewPatient ? (
            // Show patient creation form
            <div className="mt-4 border p-4 rounded-lg bg-gray-50">
              <PatientForm 
                patientData={newPatientData}
                onChange={handleNewPatientInputChange}
                errors={newPatientErrors}
              />
              
              <div className="mt-4 flex justify-end">
                <button
                  type="button"
                  onClick={handleCreatePatient}
                  className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700"
                  disabled={loading}
                >
                  <FaUserPlus className="inline-block mr-2" />
                  Create Patient
                </button>
              </div>
            </div>
          ) : (
            // Show patient selection dropdown
            <div className="mt-2">
              <FormField
                label="Select Patient*"
                id="patient-select"
                name="patient_id"
                type="select"
                value={bookingFormData.patient_id}
                onChange={handleBookingInputChange}
                error={bookingErrors.patient_id}
                required
                options={[
                  { value: '', label: 'Select Patient' },
                  ...patients.map(patient => ({
                    value: patient.id,
                    label: patient.name
                  }))
                ]}
              />
            </div>
          )}
        </div>
        
        <form onSubmit={handleBookTest}>
          <div className="mb-4">
            <FormField
              label="Select Test*"
              id="test-select"
              name="test_id"
              type="select"
              value={bookingFormData.test_id}
              onChange={handleBookingInputChange}
              error={bookingErrors.test_id}
              required
              options={[
                { value: '', label: 'Select Test' },
                ...tests.map(test => ({
                  value: test.id,
                  label: test.name
                }))
              ]}
            />
          </div>

          <div className="mb-4">
            <FormField
              label="Select Doctor*"
              id="doctor-select"
              name="doctor_id"
              type="select"
              value={bookingFormData.doctor_id}
              onChange={handleBookingInputChange}
              error={bookingErrors.doctor_id}
              required
              options={[
                { value: '', label: 'Select Doctor' },
                ...doctors.map(doctor => ({
                  value: doctor.id,
                  label: doctor.name
                }))
              ]}
            />
          </div>

          <div className="mb-6">
            <FormField
              label="Notes (optional)"
              id="test-notes"
              name="notes"
              type="textarea"
              placeholder="Additional notes or instructions"
              value={bookingFormData.notes}
              onChange={handleBookingInputChange}
            />
          </div>

          <div className="flex justify-end gap-2">
            <button
              type="button"
              className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300"
              onClick={() => {
                setShowBookingModal(false);
                setBookingFormData({
                  patient_id: '',
                  doctor_id: '',
                  test_id: '',
                  notes: ''
                });
                setBookingErrors({});
                setIsCreatingNewPatient(false);
              }}
            >
              Cancel
            </button>
            <button
              type="submit"
              className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700"
              disabled={loading || (isCreatingNewPatient && !patientCreationSuccess)}
            >
              Book Test
            </button>
          </div>
        </form>
      </div>
    </div>
  );

  // Return JSX with the updated book sample modal
  return (
    <Layout>
      <div className="p-6">
        <div className="mb-6 flex flex-col sm:flex-row justify-between items-center">
          <h1 className="text-2xl font-bold text-gray-800">Sample Management</h1>
          <div className="flex items-center mt-4 sm:mt-0 gap-4">
            <div className="relative w-full sm:w-64">
              <input
                type="text"
                placeholder="Search samples..."
                className="w-full pl-10 pr-4 py-2 border rounded-lg"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
              <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            </div>
            <button
              onClick={handleOpenBookingModal}
              className="bg-indigo-600 text-white px-3 py-2 rounded-md hover:bg-indigo-700 flex items-center whitespace-nowrap"
            >
              <FaPlus className="mr-2" /> Book New Sample
            </button>
          </div>
        </div>

        {error && (
          <div className="mb-4 p-4 bg-red-100 text-red-700 border border-red-400 rounded">
            {error}
          </div>
        )}

        {/* Tab Navigation */}
        <div className="mb-6 border-b overflow-x-auto">
          <div className="flex whitespace-nowrap">
            {tabs.map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`px-4 py-2 ${activeTab === tab.id ? `border-b-2 border-${tab.color}-600 text-${tab.color}-600` : 'text-gray-600'}`}
              >
                {tab.label} Samples
              </button>
            ))}
          </div>
        </div>

        {/* Sample list table - kept the same */}
        {/* ... existing code ... */}

        {/* Show our new booking modal */}
        {showBookingModal && renderBookSampleModal()}

        {/* Cancel Modal - kept the same */}
        {/* ... existing code ... */}

        {/* Generate Report Modal - kept the same */}
        {showGenerateReportModal && selectedSampleForReport && (
          <GenerateReportModal
            isOpen={showGenerateReportModal}
            onClose={() => {
              setShowGenerateReportModal(false);
              setSelectedSampleForReport(null);
              setIsEditingReport(false);
              setViewOnly(false); // Reset viewOnly state
              refreshCurrentTab(); // Refresh the UI after closing the modal
            }}
            testData={selectedSampleForReport}
            patientData={selectedSampleForReport.patient || {}}
            isEditing={isEditingReport}
            viewOnly={viewOnly}
          />
        )}
      </div>
    </Layout>
  );
};

export default SampleManagement;
